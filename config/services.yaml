# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,Application}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    local_listener:
        class: App\EventListener\Local
        arguments: [ '@App\Service\Uploader' ]
        tags:
            - { name: doctrine.orm.entity_listener }
            - { name: doctrine.orm.entity_listener, entity_manager: custom }

    project_listener:
        class: App\EventListener\Project
        arguments: [ '@App\Service\Sluggifier' ]
        tags:
            - { name: doctrine.orm.entity_listener }
            - { name: doctrine.orm.entity_listener, entity_manager: custom }

    # Sonata providers
    sonata.media.provider.custom.image:
        class: App\Application\Sonata\MediaBundle\Provider\CustomImageProvider
        arguments:
            $name: 'sonata.media.provider.custom.image'
            $filesystem: '@sonata.media.filesystem.local'
            $cdn: '@sonata.media.cdn.server'
            $pathGenerator: '@sonata.media.generator.default'
            $thumbnail: '@sonata.media.thumbnail.format'
            $allowedExtensions: ['jpg']
            $allowedMimeTypes: ['image/jpeg']
            $adapter: '@sonata.media.adapter.image.gd'
        tags:
            - { name: sonata.media.provider }
        calls:
            - method: setTemplates
              arguments: [{helper_thumbnail: 'sonata/providers/thumbnail.html.twig', helper_view: 'sonata/providers/view_image.html.twig'}]
            - method: setResizer
              arguments:
                  - '@sonata.media.resizer.simple'

    sonata.media.provider.custom.youtube:
        class: App\Application\Sonata\MediaBundle\Provider\CustomYoutubeProvider
        arguments:
            $name: 'sonata.media.provider.custom.youtube'
            $filesystem: '@sonata.media.filesystem.local'
            $cdn: '@sonata.media.cdn.server'
            $pathGenerator: '@sonata.media.generator.default'
            $thumbnail: '@sonata.media.thumbnail.format'
            $browser: '@sonata.media.buzz.browser'
            $metadata: '@sonata.media.metadata.proxy'
        tags:
            - { name: sonata.media.provider }
        calls:
            - method: setTemplates
              arguments: [{helper_thumbnail: 'sonata/providers/thumbnail.html.twig', helper_view: 'sonata/providers/view_youtube.html.twig'}]
            - method: setResizer
              arguments:
                  - '@sonata.media.resizer.simple'

    sonata.media.provider.custom.dailymotion:
        class: App\Application\Sonata\MediaBundle\Provider\CustomDailymotionProvider
        arguments:
            $name: 'sonata.media.provider.custom.dailymotion'
            $filesystem: '@sonata.media.filesystem.local'
            $cdn: '@sonata.media.cdn.server'
            $pathGenerator: '@sonata.media.generator.default'
            $thumbnail: '@sonata.media.thumbnail.format'
            $browser: '@sonata.media.buzz.browser'
            $metadata: '@sonata.media.metadata.proxy'
        tags:
            - { name: sonata.media.provider }
        calls:
            - method: setTemplates
              arguments: [{helper_thumbnail: 'sonata/providers/thumbnail.html.twig', helper_view: 'sonata/providers/view_dailymotion.html.twig'}]
            - method: setResizer
              arguments:
                  - '@sonata.media.resizer.simple'

    sonata.media.provider.custom.vimeo:
        class: App\Application\Sonata\MediaBundle\Provider\CustomVimeoProvider
        arguments:
            $name: 'sonata.media.provider.custom.vimeo'
            $filesystem: '@sonata.media.filesystem.local'
            $cdn: '@sonata.media.cdn.server'
            $pathGenerator: '@sonata.media.generator.default'
            $thumbnail: '@sonata.media.thumbnail.format'
            $browser: '@sonata.media.buzz.browser'
            $metadata: '@sonata.media.metadata.proxy'
        tags:
            - { name: sonata.media.provider }
        calls:
            - method: setTemplates
              arguments: [{helper_thumbnail: 'sonata/providers/thumbnail.html.twig', helper_view: 'sonata/providers/view_vimeo.html.twig'}]
            - method: setResizer
              arguments:
                  - '@sonata.media.resizer.simple'